 #pragma nosequence
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <string.h>
 #include <printhx.h>
 // entry points
 #include </usr/include/csfbext.h>
 // pkcs11 constants
// #include </usr/include/csnpdefs.h>
 #include <csnpdefs.h>
 int detail = 0;
 #pragma runopts(POSIX(ON))
 #include <gskcms.h>
 #include <gskssl.h>
 #include <X509TODN.h>
 #include <ICSFMSG.h>
 #include <hexdata.h>
 #include <gethex.h>
 #include <cka.h>
// #define lST               1000
 char * DERSerial = 0;
 int debug = 0;
 char * pSerial = 0;
 char * pXToken  = 0;
 #include <tlist3.h>
 #include <tlist4.h>
int main(int argc, char * argv[])
{
   int rc = 0 ;
   char handle[44];
   char handle2[44];
   memset(&handle[0],0,44);
   memset(&handle[0],' ',32);
   char * pToken  = 0  ;
   char * pCertID = 0  ;
   #include <listparm.h>
   if (pToken != 0 )
   // just do the one token
   {
     printf("List one token:%s.\n",pToken);
     if (strlen(pToken)> 32)
     {
        printf("Token length > 32 %s.\n",pToken);
        return 8;
     }
//      printf("pToken %s.\n",pToken);
        memset(&handle[0],' ',sizeof(handle));
        if (strlen(pToken) > 0)
          memcpy(&handle[0],pToken,strlen(pToken));
//      char * pMySerial = 0;
        if ( detail >= 1)
        getToken(&handle[0],&searchTemplate[0],lST);
     return 0;
    }
  //
  // list all of the tokens
  //
  printf("List all of the tokens\n");
       rc = -1;
  int rs = -1;
  int exit_data_length = 0 ;
  char exit_data[1];
  int rule_array_count = 1;
  char rule_array[16];
  memcpy(&rule_array[0],"TOKEN  ",8);
  #define LL 116
  int lList = LL        ;
  char output_list[LL];
  int handle_count= 1;
  int iLoop;
  for (iLoop = 0;;            iLoop ++)
  {
     lList = LL        ;
     int lSTToken = 0 ;
     CSFPTRL(
         &rc,
         &rs,
         &exit_data_length,
         &exit_data[0],
         &handle[0],
         &rule_array_count,
         &rule_array[0], // tokens
         &lSTToken,
         &searchTemplate[0],
         &lList,
         &handle_count,
         &output_list[0]);
     if ( rc == 0 && rs == 0) break;
     ICSFMessage("TLIST:CSFPTRL TOKEN",rc,rs);
     //  4/3017 means perhaps more data
     if (lList != LL)
     {
        printf("%s internal error list is too small needs to be %d\n",
                lList);
        return 8;
     }
     if (rc >= 8) break;
     int iLen = lList;
     // save the handle
     memcpy(&handle[0],&output_list[0],44);
     char tempToken[33];
     memset(&handle2[0],0,44);
     memcpy(&handle2[0],&output_list[0],32);
     if ( detail >= 1)
        getToken(&handle2[0],&searchTemplate[0],lST);
     else
     printf("Token:%44.44s.\n",&handle[0]);

     memset(&handle[0],' ',44);
     memcpy(&handle[0],&output_list[0],32);

  }  // for
    // printf("rc:%d rs:%d\n",rc,rs);
   if ( rs == 3026) printf("Token is invalid \n");
  return rc;
}
