// process an individual certificate

  #include <printder.h>

int getDetail(char * pObject)                  {
   int x509List[] = {CKA_ISSUER,CKA_SUBJECT
                    //  NOT CKA_VALUE because it is a hybrid
                    };
   int rc = -1;
   int rs = -1;
   int exit_data_length = 0 ;
   char exit_data[1];
   int rule_array_count = 0;
   char rule_array[16];                // ignored
   char handle[44];
   memset(&handle[0],' ',44);
   memcpy(&handle[0],pObject, 44) ;
   // ic used for outputting nunbers eg string of length 3 as hex
   union
   {
     int i;
     char c[4];
   } ic;
   char ID;
   char * pID = "Unknown";
   ID = *(pObject + 40) ;
   switch(ID)
   {
      case 'S':pID = "S:Clear session object."; break;
      case 'T':pID = "T:Clear token object."; break;
      case 'U':pID = "U:Clear state object."; break;
      case 'X':
         pID = "X:Enterprise PKCS #11 secure session object.";break;
      case 'Y':
         pID = "Y:Enterprise PKCS #11 secure token object.";break;
      case 'Z':
         pID = "Z:Enterprise PKCS #11 secure state object.";break;
   }
   pXToken = pObject;   // external token
// printf("4PXTOKEN %i\n",pXToken);
   printf("Token:%.32s.\n",pObject);
   printf("   Sequence:%.8s\n", pObject+32);
   printf("   ID:%s\n",pID);
   int handle_count= 1;
   int attribute_l=10000;
   char attribute[attribute_l];
   CSFPGAV(
      &rc,
      &rs,
      &exit_data_length,
      &exit_data[0],
      &handle[0],
      &rule_array_count,
      &rule_array[0],
      &attribute_l ,
      &attribute[0]);
   ICSFMessage("TLIST4:CSFPGAV",rc,rs);
    //
    // now format it
    //
    if (rc >  8) return;
    if( debug > 10)
    {
      printf("TLIST4:\n");
      printHex(stdout,&attribute[0] ,attribute_l);
    }
    int jloop;
    char * pEnd =  & attribute[2]  + attribute_l;
    short * pCount = (short *)  &attribute[0];
    short   pL;
    char * pData;
    pData = & attribute[2];
    int jLoop;

    typedef struct lookup
    {
       int   name ;
       defs * which;
       int  print;
    } lookup;
    lookup lookupVal[] = {
    {CKA_CLASS, CKO, 0    },
    {CKA_KEY_TYPE   , CKK,1 },
    {CKA_KEY_GEN_MECHANISM,CKM,1},
    {CKA_KEY_GEN_MECHANISM,CKM,1},
    {CKA_CERTIFICATE_TYPE, CKC,1},
    {CKA_CERTIFICATE_CATEGORY,CERTCAT,1},
      #ifdef del
//    {CKA_PRIVATE    , TRUEFALSE},
//    {CKA_MODIFIABLE , TRUEFALSE},
//    {CKA_DERIVE     , TRUEFALSE},
//    {CKA_LOCAL      , TRUEFALSE},
//    {CKA_DECRYPT    , TRUEFALSE},
//    {CKA_SIGN       , TRUEFALSE},
//    {CKA_SIGN_RECOVER,TRUEFALSE},
//    {CKA_UNWRAP     , TRUEFALSE},
//    {CKA_EXTRACTABLE, TRUEFALSE},
//    {CKA_IBM_FIPS140, TRUEFALSE},
//    {CKA_IBM_REGIONAL,TRUEFALSE},
//    {CKA_VERIFY,      TRUEFALSE},
//    {CKA_VERIFY_RECOVER, TRUEFALSE},
//    {CKA_IBM_SECURE,  TRUEFALSE},
//    {CKA_NEVER_EXTRACTABLE       , TRUEFALSE},
//    {CKA_SENSITIVE               , TRUEFALSE},
//    {CKA_NEVER_EXTRACTABLE       , TRUEFALSE},
//    {CKA_ALWAYS_SENSITIVE        , TRUEFALSE},
//    {CKA_WRAP_WITH_TRUSTED       , TRUEFALSE},
      #endif
    {-1,0}};
    int print0[] =
    {
      CKA_CLASS,
      CKA_TOKEN,
      CKA_LABEL,
      CKA_CERTIFICATE_TYPE,
      CKA_SERIAL_NUMBER,
      CKA_TRUSTED,
      CKA_SUBJECT,
      CKA_ID,
      CKA_ISSUER,
      CKA_START_DATE,
      CKA_END_DATE,
      CKA_APPLICATION
    };
    int printIt;
    int k;
    // for each parameter
    for (jLoop = 0;jLoop < * pCount; jLoop ++)
    {  // jloop
       int name;
       memcpy(&name,pData,4);
       printIt = 0;
       if (detail >=3 )
          printIt = 1;
       else
       for (k = 0; k < sizeof(print0)/sizeof(print0[0]); k++)
       {
         if ( name == print0[k] )
         {
           printIt = 1;
           break;
         }
       }

       memcpy(&pL ,pData + 4,2);
       int i;
       int found = 0;
       int value = 0;
       if ( pL == 1) value =    * (char *)(pData + 6);
       else
       if ( pL == 2) value =    * (short *)(pData + 6);
       else
       if ( pL == 4) value =    * (int   *)(pData + 6);
       char * pResult = getPkcsType(CKA    , name);

       if (printIt >0)
       for (i = 0; i < sizeof(x509List)/sizeof(x509List[0]); i++)
       {
         if (name == x509List[i])
         {
          printf("      %s(%hd):",pResult,pL );
          x509_to_string(pData +6,pL);
          found = 1;
          printf("\n");
         }
       }
       if (printIt >0
        && found == 0)
       { //172
         if ( name ==    CKA_LABEL)
         {
            printf("      %s(%hd):%.*s.",pResult,pL,pL,pData+6);
            found = 1;
            printf("\n");
         }
         else
         // CKA_ECDSA_PARAMS is in der format of object
         if (
             name == CKA_ID
             || name ==    CKA_EC_POINT
            )
         {
           printf("      %s(%hd):",pResult,pL);
           found = 1;
           hexdata(22,pData +6,pL);
           if( name == CKA_ID)
           {
             memset(&myID[0],0,sizeof(myID)); // preset
             if ( pL <= sizeof(myID))
               memcpy(&myID[0],pData+6,pL);//save the value
             else
               fprintf(stderr,"TLIST4: size of ID is too small:%d\n",
                     pL);
           }
         }
         else
         // CKA_ECDSA_PARAMS is in der format of object
         if ( name == CKA_VALUE
            )
         {
           printf("      %s(%hd): not displayed",pResult,pL);
           found = 1;
           printf("\n");
         }
         else
         if ( name ==    CKA_ECDSA_PARAMS
             ||    name ==  CKA_OBJECT_ID
            )
         {
            int i;
            int j;
            // we need to allow for 2 bytes the 06 ( OID) and len
            printf("      %s(%hd):",pResult,pL);
            if (detail >=2)
            for ( i= 0;i < pL -2 ;i++)
            {
               j = (int) * (pData +6 +2    + i);
               printf("%d.",j);
            }
            printf("\n");
            found = 1;
         }
         else
         if ( name ==    CKA_APPLICATION )
         {
            printf("      %s(%hd):%.*s.",pResult,pL,pL,pData+6);
            found = 1;
            printf("\n");
          }
         else
         if ( name ==    CKA_SERIAL_NUMBER )
         {
            pSerial = pData+4;
            printDER(pResult,pData+6);
            found = 1;
            printf("\n");
          }
         else
         if (strcmp(pResult,"Unknown")== 0)
         {
             printf("Unknown\n");
             printHex(stdout,pData    ,pL+6);
         }
         else
         {
           lookup * pLookup;
           pLookup = &lookupVal[0];
           int i = 0;
           for (pLookup = &lookupVal[0];pLookup-> name !=-1;
                pLookup++)
           {     //255
             if (pLookup -> name    == name   )
             {
               printf("      %s:%s",pResult,
                      getPkcsType(pLookup-> which,value));
               found = 1;
               printf("\n");
               break;
             }
           }     // pLookup //255
       }
       if (printIt >0
        && found == 0)
      { // line268
        if (pL == 0)
           printf("      %s:.\n",pResult);
        else
        if (pL == 1)
        {
           if (*(pData+6) == 0)
              printf("      %s:FALSE.\n",pResult);
           else
           if (*(pData+6) == 1)
              printf("      %s:TRUE.\n",pResult);
           else
              printf("      %s:0x%2.2x.\n",pResult,*(pData+6));
        }
        else
        if (pL == 2)
        {
          memset(ic.c,0,sizeof(ic));
          memcpy(&ic.c[2],pData+6,2);
          printf("      %s:0x%4.4x.\n",pResult,ic.i      );
        }
        else
        if (pL == 3)
        {
          memset(ic.c,0,sizeof(ic));
          memcpy(&ic.c[1],pData+6,3);
           printf("      %s:0x%6.6x.\n",pResult,ic.i      );
        }
        else
        if (pL == 4)
        {
          memset(ic.c,0,sizeof(ic));
          memcpy(&ic.c[0],pData+6,4);
          printf("      %s:0x%8.8x.\n",pResult,ic.i      );
        }
        else
        {
           printf("?     %s(%d):  \n",pResult,pL);
           if (detail >=3    )
           printHex(stdout,pData+6,pL);
        }
      } // found == 0   line268
    } //172
    // do the next one
    pData += 4 + 2 +    pL ;
    if (pData > pEnd) break;
    }  // jloop
   printf("\n"); // blank line between sets
  return rc;
 }
