     //
     //  Now parameters for filtering
     //
     if (strcmp(argv[iArg],"-label") == 0
        && iArg +1 < argc) // we have a value
     {
       char * pCertid;
       pCertID = argv[iArg+1];
       iArg ++;
       int iLen = strlen(pCertID);
// length > 32 fixed in apar OA54316 2018
//     if ( strlen(pCertID) > 32)
//     {
//        printf("Certificate label is too long (32) %d\n",
//                strlen(pCertID));
//        rc = 8;
//     }
//     if ( iLen > 32 )
//     {
//         printf("Label is too long(%d) %s.\n",iLen,pCertid);
//         return 8;
//     }
       if (pCurr  + 4 + 2 + iLen   > pEndTemplate)
       {
          printf("too much data in parameters \n");
          return  8;
       }
       *pCount = *pCount +1;
       // position the attribut to the free space
       pAttribute = (attribute  * ) pCurr;
       pAttribute -> name = CKA_LABEL;
       pAttribute -> lValue = 32;
//     pAttribute -> lValue = iLen;
       // blank all of the string
//     memset(&pAttribute ->value[0],' ',32);
       memset(&pAttribute ->value[0],0  ,32);
       // and move what we were give to it
       memcpy(&pAttribute->value[0],pCertID,iLen);
       // move pointer past
       pCurr = pCurr + 4 + 2 + pAttribute -> lValue;
      }
     else
     //
     //  certid
     //
     if (strcmp(argv[iArg],"-certid") == 0
        && iArg +1 < argc) // we have a value
     {
       char * pCertid;
       pCertID = argv[iArg+1];
       iArg ++;
       int iLen = strlen(pCertID);
       if ( iLen            > 32)
       {
          printf("Certificate label is too long (32) %d\n",
                  strlen(pCertID));
          rc = 8;
       }
       if (pCurr  + 4 + 2 + iLen   > pEndTemplate)
       {
          printf("too much data in parameters \n");
          return  8;
       }
       *pCount = *pCount +1;
       // position the attribut to the free space
       pAttribute = (attribute  * ) pCurr;
       pAttribute -> name = CKA_LABEL;
       pAttribute -> lValue = 32;
       // blank all of the string
       memset(&pAttribute ->value[0],' ',32);
       // and move what we were give to it
       memcpy(&pAttribute->value[0],pCertID,iLen);
       // move pointer past
       pCurr = pCurr + 4 + 2 + 32;
      }
     else
     //
     //  subject or issuer
     //
     if (strcmp(argv[iArg],"-subject") == 0
        ||strcmp(argv[iArg],"-issuer") == 0
        && iArg +1 < argc) // we have a value
     {
       char * type;
       type =  argv[iArg]; // save for later because we inc iArg
       char * pSubject;
       pSubject = argv[iArg+1];
       iArg ++;
       gsk_buffer   stream;
       rc=string_to_DER(pSubject,&stream);
//     printf("Stream %d  %d \n",rc, stream.length);
       if (rc != 0) return rc;
       if (pCurr  + 4 + 2 + stream.length   > pEndTemplate)
       {
          printf("too much data in parameters \n");
          return  8;
       }
       *pCount = *pCount +1;
       // position the attribut to the free space
       pAttribute = (attribute  * ) pCurr;
       if (strcmp(type,"-subject") == 0)
       {
         pAttribute -> name = CKA_SUBJECT;
       }
       else
       {
         pAttribute -> name = CKA_ISSUER;
       }
       pAttribute -> lValue = stream.length;
       // blank all of the string
       memcpy(&pAttribute ->value[0],stream.data,stream.length);
       pCurr = pCurr + 4 + 2 + stream.length;
       gsk_free_buffer(&stream);
      }
     //  end subject or issuer
     else

     //
     // certifcate type
     //
#ifdef del
     if ((strcmp(argv[iArg],"-class") == 0
          ||strcmp(argv[iArg],"-type") == 0
         )
        && iArg +1 < argc) // we have a value
     {
       iArg ++;

       char * pCertid;
       int type;
       if (strcmp(argv[iArg],"data") == 0) type = 0;
       else
       if (strcmp(argv[iArg],"cert") == 0) type = 1;
       else
       if (strcmp(argv[iArg],"pub") == 0) type = 2;
       else
       if (strcmp(argv[iArg],"priv") == 0) type = 3;
       else
       if (strcmp(argv[iArg],"secret") == 0) type = 4;
       else
       if (strcmp(argv[iArg],"hw") == 0) type = 5;
       else
       if (strcmp(argv[iArg],"domain") == 0) type = 6;
       else
       if (strcmp(argv[iArg],"mechanism") == 0) type = 7;
       else
       {
         printf("-type value %s is not recognised\n",argv[iArg]);
         return 8;
       }
       if (pCurr  + 4 + 2 + 4  > pEndTemplate)
       {
          printf("too much data in parameters \n");
          return  8;
       }
       *pCount = *pCount +1;
       // position the attribut to the free space
       pAttribute = (attribute  * ) pCurr;
       pAttribute -> name = CKA_CLASS;
       pAttribute -> lValue = 4;
       // blank all of the string
       memcpy(&pAttribute->value[0],&type,sizeof(type));
       // move pointer past
       pCurr = pCurr + 4 + 2 + sizeof(type);
      }
     //
     // application
     //
     else
#endif
     if (strcmp(argv[iArg],"-appl") == 0
        && iArg +1 < argc) // we have a value
     {
       char * pApplid;
       pApplid = argv[iArg+1];
       iArg ++;
       if ( strlen(pApplid) > 32)
       {
          printf("Applid is too long (32) %d\n",
                  strlen(pApplid));
          rc = 8;
       }
       int iLen = strlen(pApplid);
       if ( iLen > 32 )
       {
           printf("Applid is too long(%d) %s.\n",iLen,pApplid);
           return 8;
       }
       if (pCurr  + 4 + 2 + 32     > pEndTemplate)
       {
          printf("too much data in parameters \n");
          return  8;
       }
       *pCount = *pCount +1;
       #define lAppl 32
       // position the attribut to the free space
       pAttribute = (attribute  * ) pCurr;
       pAttribute -> name = CKA_APPLICATION;
       pAttribute -> lValue = lAppl;
       // blank all of the string
       memset(&pAttribute ->value[0],' ',lAppl);
       // and move what we were give to it
       memcpy(&pAttribute->value[0],pApplid,iLen);
       // move pointer past
       pCurr = pCurr + 4 + 2 + lAppl;
      }

     else
     //
     //  serial number   source ebcdic - > hex
     //
     if (strcmp(argv[iArg],"-serial") == 0
        && iArg +1 < argc) // we have a value
     {
       iArg ++;
       pDataz = argv[iArg];
       int iLen = strlen(pDataz);
       if ( iLen > 16 )
       {
           printf("Serial is too long(%d) %s.\n",iLen,pDataz);
           return 8;
       }
       pAttribute = (attribute  * ) pCurr;
       pAttribute -> name = CKA_SERIAL_NUMBER;
       // it is in der format,type = 02, length, value
       pAttribute->value[0] = 0x02;

       getHex(iLen, pDataz, &pAttribute->value[1],DER);
       // get total length
       pAttribute -> lValue = 1 + 1+ pAttribute->value[1];
//     pToken = "PKISRVD.PKITOKEN                 ";
       // 4 byte type, 2 bytes length, 1 byte der integer
       // 1 byte der length, xxxbytes data
//     printHex(stdout,pCurr,32);
       pCurr = pCurr + 4 + 2 + 1+1+ pAttribute -> lValue; // der length
       *pCount = *pCount +1;
      }
